# tox.ini
# This configuration shows how to use tox with a Poetry-managed project
# by letting tox manage the environment.
[tox]
min_version = 4.0
env_list = py313, pytest, lint, format, typecheck, dist

# ---
# This is the base configuration for all test environments.
[testenv]
description = Setup tox project
# Tox will automatically use the pyproject.toml build backend (poetry)
# to install the package in an isolated way.
isolated_build = True

# ---
# This section defines the specific environment for Python 3.13 testing.
[testenv:py313]
# Use the Python 3.13 interpreter.
base_python = python3.13
# This is the key change. We tell tox to install the project itself.
# This makes all the dependencies from pyproject.toml available to the env.
deps =
    -e .

[testenv:pytest]
description = Run pytests for the project
deps =
    # The tests need the package installed.
    -e .
    pytest
    flask
    flask_cors

commands =
    pytest tests
# This is the fix: we explicitly allow the `pytest` command to run.
allowlist_externals =
    pytest

[testenv:lint]
description = "Run linters"
commands =
    poetry install --no-root --sync
    poetry run pylint oracle_server tests
allowlist_externals =
    poetry

[testenv:format]
description = format with black
deps =
    black
commands =
    black oracle_server --check --diff
allowlist_externals =
    black

[testenv:typecheck]
description = Type checking with mypy
base_python = python3.13
deps =
    # MyPy often needs the package installed for correct type resolution.
    -e .
    mypy
commands = mypy oracle_server
allowlist_externals =
    mypy

[testenv:dist]
description =
    Build a distribution via poetry.
commands =
    poetry build
allowlist_externals =
    poetry

;[testenv:download-spec]
;description = Download OpenAPI spec artifact
;deps =
;    requests
;# This is the fix: pass the environment variables directly to the Python script
;commands =
;    python github_artifacts.py --repo {env:BABYLON_API_REPO} --run-id {env:BABYLON_API_GITHUB_RUN_ID} --artifact-name {env:BABYLON_API_ARTIFACT_NAME} --pat-token {env:BABYLON_API_GITHUB_PAT_TOKEN}
;# We explicitly allow the `python` command to run.
;allowlist_externals =
;    python
;setenv =
;    BABYLON_API_REPO = ajponte/babylon_api_spec
;    BABYLON_API_GITHUB_RUN_ID = 17890680139
;    BABYLON_API_ARTIFACT_NAME = api-spec-17890680139
;# Pass the PAT from your local environment to tox.
;passenv = BABYLON_API_GITHUB_PAT_TOKEN
